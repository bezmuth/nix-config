# Auto-generated using compose2nix v0.3.1.
{
  pkgs,
  lib,
  config,
  ...
}:

{

  age.secrets.tailscale.file = ../../secrets/tailscale.age;
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."tornode" = {
    image = "ghcr.io/bezmuth/private-onion-exitnode";
    environmentFiles = [
      config.age.secrets.tailscale.path
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--cap-add=NET_RAW"
      "--network-alias=private-onion-exitnode"
      "--network=private-onion-exitnode_default"
    ];
  };
  systemd.services."podman-tornode" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-private-onion-exitnode_default.service"
    ];
    requires = [
      "podman-network-private-onion-exitnode_default.service"
    ];
    partOf = [
      "podman-compose-private-onion-exitnode-root.target"
    ];
    wantedBy = [
      "podman-compose-private-onion-exitnode-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-private-onion-exitnode_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f private-onion-exitnode_default";
    };
    script = ''
      podman network inspect private-onion-exitnode_default || podman network create private-onion-exitnode_default
    '';
    partOf = [ "podman-compose-private-onion-exitnode-root.target" ];
    wantedBy = [ "podman-compose-private-onion-exitnode-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-private-onion-exitnode-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}

#+TITLE: Emacs Config
#+AUTHOR: Bezmuth
#+PROPERTY: header-args:emacs-lisp :tangle yes

Mostly stolen from: https://github.com/ZacJoffe/zemacs/blob/master/init.el#L1415-L1540
* Core Packages and Setup
** Emacs Boilerplate
#+BEGIN_SRC emacs-lisp
  ;; A few more useful configurations...
  (use-package emacs
    :ensure nil
    :custom
    (inhibit-startup-message t
         inhibit-startup-screen t
         inhibit-splash-screen t
         initial-buffer-choice 'scratch-buffer
         blink-cursor-mode nil
         native-comp-async-report-warnings-errors nil
         initial-major-mode 'text-mode
         ad-redefinition-action 'accept
         suggest-key-bindings nil
         initial-scratch-message
         read-process-output-max (* 1024 1024)
         gc-cons-threshold 100000000)
    :init
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)
    (setq tab-always-indent 'complete)
    ;; TODO try cape-dict
    ;;(text-mode-ispell-word-completion nil)
    ;; Hides irrelevant stuff from M-x
    (setq read-extended-command-predicate #'command-completion-default-include-p))
    (byte-compile-disable-warning 'obsolete)
#+END_SRC
** Orgmode config
#+BEGIN_SRC emacs-lisp
  ;; Make indentation with tab work properly in org mode code blocks
  (setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+END_SRC
** Editor Settings
#+BEGIN_SRC emacs-lisp
  ;; some editor settings
  (setq-default indent-tabs-mode nil    ;; indent with spaces
                tab-width 4             ;; 1 tab <=> 4 spaces
                c-basic-offset 4        ;; indentation for cc modes
                c-default-style "linux" ;; https://en.wikipedia.org/wiki/Indentation_style
                fill-column 80          ;; wrap at 80 characters for auto-fill-mode
                word-wrap t             ;; do not wrap characters in the middle of words
                truncate-lines t)       ;; do not wrap by default
  ;; some sane defaults
  (scroll-bar-mode -1) ;; disable visible scrollbar
  (tool-bar-mode -1)   ;; disable the toolbar
  (tooltip-mode -1)    ;; disable tooltips
  (menu-bar-mode -1)   ;; disable the menu bar
  ;; sentences should end with 1 space
  (setq sentence-end-double-space nil)
  ;; fringe setup (left . right)
  (set-fringe-mode '(4 . 4))
  ;; Show trailing whitespace
  ;; show trailing whitespace
  (setq-default show-trailing-whitespace nil)
  (defun show-trailing-whitespace-hook ()
    "Hook to enable displaying trailing whitespace."
    (setq show-trailing-whitespace t))
  (add-hook 'prog-mode-hook 'show-trailing-whitespace-hook)
  (add-hook 'text-mode-hook 'show-trailing-whitespace-hook)
  (add-hook 'org-mode-hook 'show-trailing-whitespace-hook)
  (add-hook 'markdown-mode-hook 'show-trailing-whitespace-hook)
  ;; show tabs in the editor
  (setq-default whitespace-style '(face tabs tab-mark))
  (global-whitespace-mode 1)
  ;; prompt y/n instead of yes/no
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; setup line numbers
  ;; do not dynamically resize line number column when a digit needs to be added
  (setq display-line-numbers-width-start t)
  ;; HACK prevent M-x from shrinking line number width
  ;; https://github.com/abo-abo/swiper/issues/1940#issuecomment-465374308
  (setq display-line-numbers-width 3)
  ;; I don't want line numbers in help files, dired, etc.
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'conf-mode-hook 'display-line-numbers-mode)
  ;; relative line numbers
  (setq display-line-numbers-type 'relative)
  ;; scrolling config
  (setq scroll-conservatively  10000
        fast-but-imprecise-scrolling t

        ;; https://github.com/hlissner/doom-emacs/blob/master/core/core-ui.el#L150
        hscroll-margin 2
        hscroll-step 1
        scroll-margin 0
        scroll-preserve-screen-position t
        ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
        ;; for tall lines.
        auto-window-vscroll nil)
  ;; disable bells (distracting)
  (setq ring-bell-function 'ignore)
  ;; font
  (set-face-attribute 'default nil :font "Iosevka" :height 140 :weight 'bold)
#+END_SRC
** No Literring
Put backup files and auto-save files in their own directory.
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :init
    ;; https://github.com/emacscollective/no-littering#backup-files
    (setq backup-directory-alist
          `(("\\`/tmp/" . nil)
            ("\\`/dev/shm/" . nil)
            ("." . ,(no-littering-expand-var-file-name "backup/"))))
    ;; auto-saves go in another directory
    ;; https://github.com/emacscollective/no-littering#auto-save-settings
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
          create-lockfiles nil))
#+END_SRC
** undo-fu/vundo
#+BEGIN_SRC emacs-lisp
  ;; undo-fu/vundo stack
  (use-package undo-fu
    :after evil
    :config
    ;; increase history limits
    ;; https://github.com/emacsmirror/undo-fu#undo-limits
    (setq undo-limit 6710886400 ;; 64mb.
          undo-strong-limit 100663296 ;; 96mb.
          undo-outer-limit 1006632960) ;; 960mb.
    )

  (use-package undo-fu-session
    :after undo-fu
    :init
    (undo-fu-session-global-mode)
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))

  (use-package vundo
    ;; :straight (vundo :type git :host github :repo "casouri/vundo")
    :config
    (setq vundo-compact-display t))
#+END_SRC
** Savehist
#+BEGIN_SRC emacs-lisp
  ;; Persist history over Emacs restarts.
  (use-package savehist
    :ensure nil
    :custom
    ;; ensure savefile is actually put somewhere (conflicts with no littering)
    (user-emacs-directory (expand-file-name "emacs/" (or (getenv "XDG_CACHE_HOME") "~/.cache/"))
    savehist-file (expand-file-name "history" user-emacs-directory))
    :init
    (savehist-mode))
#+END_SRC
** Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure nil
    :hook (git-commit-setup . git-commit-turn-on-flyspell))
  ;; spelling correction menu using completing-read (so consult)
  (use-package flyspell-correct
    :after flyspell)
#+END_SRC
** Themes
#+BEGIN_SRC emacs-lisp
  (use-package catppuccin-theme
    :init
    (setq catppuccin-flavor 'mocha))
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'catppuccin :no-confirm)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :hook (doom-modeline-mode . size-indication-mode) ; filesize in modeline
    :hook (doom-modeline-mode . column-number-mode)   ; cursor column in modeline
                                          ; https://github.com/hlissner/doom-emacs/blob/master/modules/ui/modeline/config.el
    :custom
    (display-time-default-load-average nil)
    :init
    ;; (unless after-init-time
    ;;   ;; prevent flash of unstyled modeline at startup
    ;;   (setq-default mode-line-format nil))

    ;; ;; We display project info in the modeline ourselves
    ;; (setq projectile-dynamic-mode-line nil
    ;;       ;; set these early so they don't trigger variable watchers
    ;;       doom-modeline-bar-width 3
    ;;       doom-modeline-buffer-file-name-style 'truncate-nil
    ;;       ;; Only show file encoding if it's non-UTF-8 and different line endings
    ;;       ;; than the current OSes preference
    ;;       doom-modeline-buffer-encoding 'nondefault
    ;;       ;; default line endings are LF on mac/linux, CRLF on windows
    ;;       doom-modeline-default-eol-type (if (or (eq system-type 'gnu/linux) (eq system-type 'darwin)) 0 1))

    :config
    ;; ;; display symlink file paths https://github.com/seagle0128/doom-modeline#faq
    (setq find-file-visit-truename t)
    ;; Donâ€™t compact font caches during GC.
    (setq inhibit-compacting-font-caches t)
    ;; doom uses the default modeline that is defined here: https://github.com/seagle0128/doom-modeline/blob/master/doom-modeline.el#L90
    ;; as far as I can tell you can't change the ordering of segments without redefining the modeline entirely (segments can be toggled though)
    (display-time-mode t)
    (doom-modeline-def-modeline 'my-line
      '(bar modals buffer-info buffer-position selection-info)
      '(lsp major-mode process vcs check misc-info))
    ;; Add to `doom-modeline-mode-hook` or other hooks
    (defun setup-custom-doom-modeline ()
      (doom-modeline-set-modeline 'my-line 'default))
    (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline))
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (setq which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10)
    (which-key-mode))
#+END_SRC
* General.el
#+BEGIN_SRC emacs-lisp
    ;; https://github.com/hlissner/doom-emacs/blob/master/modules/config/default/config.el#L6
  ;; general keybindings
  (use-package general)
  (general-evil-setup)
  (general-override-mode) ;; https://github.com/noctuid/general.el/issues/99#issuecomment-360914335
  (general-create-definer my-leader-def
    :prefix "SPC")
  (my-leader-def
    :states '(motion normal visual)
    :keymaps 'override ;; https://github.com/noctuid/general.el/issues/99#issuecomment-360914335
    ;;
    "SPC" '(counsel-M-x :which-key "M-x")
    ;; File managment
    "f" '(:ignore t :which-key "Editor")
    "fs" '(save-buffer :which-key "Save Buffer")
    "fd" '(dired :which-key "Dired")
    "ff" '(find-file :which-key "Find File")
    "fr" '(recentf :which-key "Recent Files")
    ;; buffer
    ;;"TAB" '(switch-to-prev-buffer :which-key "Prev buffer")
    "b" '(:ignore t :which-key "Buffer")
    "bb" '(consult-project-buffer :which-key "consult-buffer")
    "bB" '(consult-buffer :which-key "consult-buffer")
    "bn" '(previous-buffer :which-key "Previous buffer") ;
    "bp" '(next-buffer :which-key "Next buffer")
    "bd" '(kill-current-buffer :which-key "Kill buffer")
    ;; window
    "w" '(:ignore t :which-key "Window")
    "ws" '(split-window-horizontally :which-key "Split horizontal")
    "wv" '(split-window-vertically :which-key "Split vertical")
    "wh" '(evil-window-left :which-key "Window Left")
    "wj" '(evil-window-down :which-key "Window Down")
    "wk" '(evil-window-up :which-key "Window Up")
    "wl" '(evil-window-right :which-key "Window Right")
    "wd" '(delete-window :which-key "Delete Window")
    ;; project
    "p" '(:ignore t :which-key "Projects")
    "pp" '(projectile-switch-project :which-key "Switch project")
    "pf" '(projectile-find-file :which-key "Find file in project")
    "pg" '(projectile-grep :which-key "Grep in project")
    "pr" '(projectile-replace :which-key "Replace in project")
    "pc" '(projectile-compile-project :which-key "Build project")
    "pa" '(projectile-add-known-project :which-key "Add project")
    "pe" '(projectile-run-eshell :which-key "Run eshell in project root")
    ;; code/lsp
    "c" '(:ignore t :which-key "Code Actions")
    "ch" '(eldoc-print-current-symbol-info :which-key "Show docs for function")
    "cc" '(counsult-eglot-symbols :which-key "Opens lsp symbol broser")
    ;;"cf" '(consult-flycheck :which-key "Consult flycheck")
    "ca" '(eglot-code-actions :which-key "Apply code actions at point")
    "cj" '(justl :which-key "Open justfile Menu")
    ;; git
    "g" '(:ignore t :which-key "Git") ; prefix
    "gg" '(magit-status :which-key "Git status")
    )
#+END_SRC
* Modal Editing
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  ;; need this here or evil-collection complains
  (setq evil-want-keybinding nil)
  :custom
  (evil-search-module 'evil-search
        evil-ex-complete-emacs-commands nil
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-shift-round nil
        evil-want-C-u-scroll t
        evil-want-integration t
        evil-normal-state-cursor 'box
        evil-search-module 'evil-search
        evil-undo-system 'undo-fu
        evil-respect-visual-line-mode t
        evil-shift-width tab-width
        evil-cross-lines t)
  :general
  ("C-S-o" 'evil-jump-forward)
  :config
  ;; highlight the current line (not explicitly evil but whatever)
  (global-hl-line-mode 1)
  (evil-mode))
#+END_SRC
** Evil Helper Packgages
#+BEGIN_SRC emacs-lisp
  ;; evil collection
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
  ;; evil surround
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
  ;; evil org
  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  ;; evil-commentary
  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode))
  ;; show evil actions
  (use-package evil-goggles
    :after evil
    :init
    (setq evil-goggles-duration 0.1)
    :config
    (evil-goggles-mode))

#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    :general
    (general-unbind 'ivy-minibuffer-map
      "C-j"
      "C-k")
    (:keymaps 'ivy-minibuffer-map
              "C-j" 'ivy-next-line
              "C-k" 'ivy-previous-line)
    :config
    (ivy-mode))
#+END_SRC
** Counsel + Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :init
    (counsel-mode))
  (use-package swiper
    :general
    ( :states '(motion normal visual)
      :keymaps 'override
      "/" 'swiper))
#+END_SRC
* Development
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :custom
    (projectile-enable-caching t
     projectile-auto-discover nil
     projectile-project-search-path '("~/Projects/"))
    :config
    (projectile-mode +1))
#+END_SRC
** Highlight todos
#+BEGIN_SRC emacs-lisp
    (use-package hl-todo
      :custom
      (hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(;; For things that need to be done, just not today.
            ("TODO" warning bold)
            ;; For problems that will become bigger problems later if not
            ;; fixed ASAP.
            ("FIXME" error bold)
            ;; For tidbits that are unconventional and not intended uses of the
            ;; constituent parts, and may break in a future update.
            ("HACK" font-lock-constant-face bold)
            ;; For things that were done hastily and/or hasn't been thoroughly
            ;; tested. It may not even be necessary!
            ("REVIEW" font-lock-keyword-face bold)
            ;; For especially important gotchas with a given implementation,
            ;; directed at another user other than the author.
            ("NOTE" success bold)
            ;; For things that just gotta go and will soon be gone.
            ("DEPRECATED" font-lock-doc-face bold)
            ;; For a known bug that needs a workaround
            ("BUG" error bold)
            ;; For warning about a problematic or misguiding code
            ("XXX" font-lock-constant-face bold)
            ;; for temp comments or TODOs to be deleted
            ("DELETEME" error bold)
            ("KILLME" error bold)
            ;; for works in progress
            ("WIP" font-lock-keyword-face bold)))
      :hook ((prog-mode . hl-todo-mode)
             (markdown-mode . hl-todo-mode)
             (org-mode . hl-todo-mode)
             (LaTeX-mode . hl-todo-mode))
  )
#+END_SRC
** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (LaTeX-mode . rainbow-delimiters-mode)
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Highlight Numbers
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook ((prog-mode . highlight-numbers-mode)))
#+END_SRC
** Git
*** Magit
#+BEGIN_SRC emacs-lisp
    (use-package magit
      ;; refresh status when you save file being tracked in repo
      :hook (after-save . magit-after-save-refresh-status)
      ;; start magit commit in insert mode https://emacs.stackexchange.com/a/20895
      ;; :hook (git-commit-mode . evil-insert-state)
      :custom
      ;; display magit status in current buffer (no popup) https://stackoverflow.com/a/58554387/11312409
      (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1
       magit-auto-revert-mode t
       ;; highlight commit message after 50 characters
       git-commit-summary-max-length 50
       ;; NOTE this is apparently DEPRECATED but it seems to do exactly what I want (autowrap commmit body at 72 chars)
       git-commit-fill-column 72)
      :general
      (:keymaps
       'transient-base-map "<escape>" 'transient-quit-one)
      (:states '(normal visual)
               :keymaps 'magit-mode-map
               "q" '+magit/quit)
  )
#+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :init
    (global-git-gutter-mode 1))

  (use-package git-gutter-fringe
    :config
    ;; pretty diff indicators
    ;; https://github.com/hlissner/doom-emacs/blob/master/modules/ui/vc-gutter/config.el#L106
    (setq-default fringes-outside-margins t)
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+END_SRC
** Justfile
#+BEGIN_SRC emacs-lisp
  (use-package justl
    :general
    (:states '(normal)
             :keymaps 'justl-mode-map
             "RET" 'justl-exec-recipe
             "S-RET" 'justl-exec-eshell))
#+END_SRC
** Autocomplete - Corfu
TODO: Look into cape
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-preview-current t)    ;; Enable current candidate preview
    (corfu-preselect-first t)    ;; Disable candidate preselection
    (corfu-count 6)
    (corfu-echo-documentation t)
    (corfu-min-width 25)
    (corfu-max-width corfu-min-width)

    :hook (prog-mode . corfu-mode)
    :general
    (:keymaps 'corfu-map
              "C-n" 'corfu-next
              "C-j" 'corfu-next
              "C-p" 'corfu-previous
              "C-k" 'corfu-previous
              "C-SPC" 'corfu-insert-separator
              "<tab>" '+corfu-complete-quit
              "<escape>" '+corfu-quit) ;; NOTE also sets functionality of "C-["
    :config
    (global-corfu-mode)
    (corfu-popupinfo-mode)
    (corfu-history-mode)
    (add-to-list 'savehist-additional-variables 'corfu-history)
    (setq corfu-popupinfo-delay 1))

  (defun +corfu-quit ()
    "Quit corfu completion, go back to normal mode."
    (interactive)
    (corfu-quit)
    (evil-normal-state))

  (defun +corfu-complete-quit ()
    "Corfu complete and quit."
    (interactive)
    (corfu-complete)
    (corfu-quit))

  ;; icons for corfu
  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (setq kind-icon-use-icons nil) ;; text based icons
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

#+END_SRC
** Eglot - lsp
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    ;;  :straight (:type built-in)
    ;; https://github.com/minad/corfu/wiki
    :init
    :config
    )
  (use-package consult-eglot)
#+END_SRC
** Direnv
#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+END_SRC
** Tree Sitter
TODO port config to use emacs29 native treesit
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
    :init
    (global-tree-sitter-mode))

  (use-package tree-sitter-langs
    ;; enable tree sitter syntax highlighting whenever possible https://emacs-tree-sitter.github.io/syntax-highlighting/
    :hook (tree-sitter-after-on . tree-sitter-hl-mode))
#+END_SRC
** Editor Config
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+END_SRC
** Consult
#+BEGIN_SRC emacs-lisp
  (use-package consult)
  (use-package consult-flycheck
    :after (consult flycheck))
  (use-package consult-flyspell
    :config
    ;; default settings
    (setq consult-flyspell-select-function nil
          consult-flyspell-set-point-after-word t
          consult-flyspell-always-check-buffer nil))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config (global-flycheck-mode))
#+END_SRC

* Languages
*** Nix
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
  :mode "\\.nix\\'"
  :commands nixfmt-on-save-mode)
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rustic
  :mode ("\\.rs\\'" . rustic-mode)
  :custom
  (rustic-lsp-client 'eglot)
  (rustic-format-trigger 'on-save)
)

(push 'rustic-clippy flycheck-checkers)
(remove-hook 'rustic-mode-hook 'flycheck-mode)

(defun rustic-mode-auto-save-hook ()
  "Enable auto-saving in rustic-mode buffers."
  (when buffer-file-name
    (setq-local compilation-ask-about-save nil)))
(add-hook 'rustic-mode-hook 'rustic-mode-auto-save-hook)
#+END_SRC
